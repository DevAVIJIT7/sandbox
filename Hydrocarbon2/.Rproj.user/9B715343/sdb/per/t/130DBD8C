{
    "collab_server" : "",
    "contents" : "install_github(\"ropensci/datapack\")\n\n# This script creates a DataPackage from the HydroCarbon dataset and uploads it to the\n# specified member node. The `datapack::addRunProv` function is used to add the provenance relationships\n#\n# The resolveURI is used to construct the DataONE object URIs. The default is to use the \n# DataONE 'resolve' service URL, but the URL for a test environment can be used instead, for example,.\n# \"https://cn-dev-2.test.dataone.org/cn/v2/resolve\".\n# This script version uses the newest R datapack package as of 2017 01 20\nlibrary(dataone)\nlibrary(datapack)\nlibrary(EML)\n\nuploadPkg <- function() {\n    resolveURI <- \"https://cn-dev-2.test.dataone.org/cn/v2/resolve\"\n    #resolveURI <- \"https://cn.dataone.org/cn/v2/resolve\"\n    \n    dp <- new(\"DataPackage\")\n    dataDir <- \"/home/goldstein/Hydrocarbon\"\n      # \"/Users/slaughter/Projects/DataONE/Provenance/GOA-HydroCarbonDB/newdatapack\"\n    emlFile <- sprintf(\"%s/metadata1.xml\", dataDir)\n    EMLdoc <- read_eml(emlFile)\n    \n    cn <- CNode(\"DEV2\")\n    mn <- getMNode(cn, \"urn:node:mnDevUCSB1\")\n    d1c <- new(\"D1Client\", cn=cn, mn=mn)\n    \n    #\n    #----- Execution #0\n    #\n    message(\"Adding package objects for execution #0...\")\n    inputs <- list()\n    outputs <- list()\n    # Create a DataObject to hold the script file\n    progObj <- new(\"DataObject\", format=\"application/R\", filename=sprintf(\"%s/%s\", dataDir, \"DataDownload.R\"), \n                   mediaType=\"text/x-rsrc\", \n                   suggestedFilename=\"DataDownload.R\")\n    # Add the script DataObject to the DataPackage\n    dp <- addData(dp, progObj)\n    EMLdoc <- updateEMLdistURL(EMLdoc, entityName=\"DataDownload.R\", resolveUrl=sprintf(\"%s/%s\", resolveURI, getIdentifier(progObj)))\n    \n    do <- new(\"DataObject\", format=\"application/octet-stream\", filename=sprintf(\"%s/%s\", dataDir, \"EVTHD Feb 2016.accdb\"), suggestedFilename=\"EVTHD Feb 2016.accdb\")\n    dp <- addData(dp, do)\n    inputs[[length(inputs)+1]] <- do\n    EMLdoc <- updateEMLdistURL(EMLdoc, entityName=\"EVTHD Feb 2016.accdb\", resolveUrl=sprintf(\"%s/%s\", resolveURI, getIdentifier(do)))\n    \n    doOut <- new(\"DataObject\", format=\"text/csv\", filename=sprintf(\"%s/%s\", dataDir, \"Alkane.csv\"), suggestedFilename=\"Alkane.csv\")\n    dp <- addData(dp, doOut)\n    outputs[[length(outputs)+1]] <- doOut\n    EMLdoc <- updateEMLdistURL(EMLdoc, entityName=\"Alkane data input file\", resolveUrl=sprintf(\"%s/%s\", resolveURI, getIdentifier(doOut)))\n    \n    doOut <- new(\"DataObject\", format=\"text/csv\", filename=sprintf(\"%s/%s\", dataDir, \"PAH.csv\"), suggestedFilename=\"PAH.csv\")\n    dp <- addData(dp, doOut)\n    outputs[[length(outputs)+1]] <- doOut\n    EMLdoc <- updateEMLdistURL(EMLdoc, entityName=\"PAH data input file\", resolveUrl=sprintf(\"%s/%s\", resolveURI, getIdentifier(doOut)))\n    \n    doOut <- new(\"DataObject\", format=\"text/csv\", filename=sprintf(\"%s/%s\", dataDir, \"Sample.csv\"), suggestedFilename=\"Sample.csv\")\n    dp <- addData(dp, doOut)\n    outputs[[length(outputs)+1]] <- doOut\n    EMLdoc <- updateEMLdistURL(EMLdoc, entityName=\"Samples input file\", resolveUrl=sprintf(\"%s/%s\", resolveURI, getIdentifier(doOut)))\n    \n    doOut <- new(\"DataObject\", format=\"text/csv\", filename=sprintf(\"%s/%s\", dataDir, \"CollectionMethods.csv\"), suggestedFilename=\"CollectionMethods.csv\")\n    dp <- addData(dp, doOut)\n    outputs[[length(outputs)+1]] <- doOut\n    EMLdoc <- updateEMLdistURL(EMLdoc, entityName=\"CollectionMethods.csv\", resolveUrl=sprintf(\"%s/%s\", resolveURI, getIdentifier(doOut)))\n\n# Now add the provenance relationships for this script, and it's inputs and outputs\ndp <- insertDerivation(dp, sources=inputs, program=progObj, derivations=outputs) \n    \n    #\n    #----- Execution #1\n    #\n    message(\"Adding package objects for execution #1...\")\n    inputs <- list()\n    outputs <- list()\n    # Create a DataObject to hold the script file\n    progObj <- new(\"DataObject\", format=\"application/R\", filename=sprintf(\"%s/%s\", dataDir, \"df35b.268.1.R\"), \n                   mediaType=\"text/x-rsrc\", \n                   suggestedFilename=\"Total_PAH_and_Alkanes_GoA_Hydrocarbons_Clean.R\")\n    # Add the script DataObject to the DataPackage\n    dp <- addData(dp, progObj)\n    EMLdoc <- updateEMLdistURL(EMLdoc, entityName=\"Data merging R script\", resolveUrl=sprintf(\"%s/%s\", resolveURI, getIdentifier(progObj)))\n    \n    do <- new(\"DataObject\", format=\"text/csv\", filename=sprintf(\"%s/%s\", dataDir, \"df35b.256.1.csv\"), suggestedFilename=\"Non-EVOS SINs.csv\")\n    dp <- addData(dp, do)\n    inputs[[length(inputs)+1]] <- do\n    EMLdoc <- updateEMLdistURL(EMLdoc, entityName=\"Non-EVOS SINs.csv\", resolveUrl=sprintf(\"%s/%s\", resolveURI, getIdentifier(do)))\n    \n    do <- new(\"DataObject\", format=\"text/csv\", filename=sprintf(\"%s/%s\", dataDir, \"Sample.csv\"), suggestedFilename=\"Sample.csv\")\n    dp <- addData(dp, do)\n    inputs[[length(inputs)+1]] <- do\n    EMLdoc <- updateEMLdistURL(EMLdoc, entityName=\"Samples input file\", resolveUrl=sprintf(\"%s/%s\", resolveURI, getIdentifier(do)))\n    \n    do <- new(\"DataObject\", format=\"text/csv\", filename=sprintf(\"%s/%s\", dataDir, \"PAH.csv\"), suggestedFilename=\"PAH.csv\")\n    dp <- addData(dp, do)\n    inputs[[length(inputs)+1]] <- do\n    EMLdoc <- updateEMLdistURL(EMLdoc, entityName=\"PAH data input file\", resolveUrl=sprintf(\"%s/%s\", resolveURI, getIdentifier(do)))\n    \n    do <- new(\"DataObject\", format=\"text/csv\", filename=sprintf(\"%s/%s\", dataDir, \"Alkane.csv\"), suggestedFilename=\"Alkane.csv\")\n    dp <- addData(dp, do)\n    inputs[[length(inputs)+1]] <- do\n    EMLdoc <- updateEMLdistURL(EMLdoc, entityName=\"Alkane data input file\", resolveUrl=sprintf(\"%s/%s\", resolveURI, getIdentifier(do)))\n    \n    doOut <- new(\"DataObject\", format=\"text/csv\", filename=sprintf(\"%s/%s\", dataDir, \"df35b.254.3.csv\"), suggestedFilename=\"Total_Aromatic_Alkanes_PWS.csv\")\n    dp <- addData(dp, doOut)\n    outputs[[length(outputs)+1]] <- doOut\n    EMLdoc <- updateEMLdistURL(EMLdoc, entityName=\"Total_Aromatic_Alkanes_PWS.csv\", resolveUrl=sprintf(\"%s/%s\", resolveURI, getIdentifier(doOut)))\n    \n    # Now add the provenance relationships for this script, and it's inputs and outputs\n    dp <- insertDerivation(dp, sources=inputs, program=progObj, derivations=outputs) \n    \n    # Add the auxillary file - this file does not have any prov relations, so don't need to add it to the inputs or outputs list\n    anxillaryFile <- \"CollectionMethods.csv\"\n    do <- new(\"DataObject\", format=\"text/csv\", filename=sprintf(\"%s/%s\", dataDir, \"CollectionMethods.csv\"), suggestedFilename=\"CollectionMethods.csv\")\n    dp <- addData(dp, do)\n    EMLdoc <- updateEMLdistURL(EMLdoc, entityName=\"CollectionMethods.csv\", resolveUrl=sprintf(\"%s/%s\", resolveURI, getIdentifier(do)))\n    \n    #\n    #----- Execution #2\n    #\n    \n    message(\"Adding package objects for execution #2...\")\n    # Reset the input, output lists\n    inputs <- list()\n    outputs <- list()\n    # This is the step that links execution #1 and execution #2.\n    # The output object from step one is input to step 2, so don't need to create another DataObject, just record\n    # the new relationship for the object (as an input to execution #2).\n    inputs[[length(inputs)+1]] <- doOut\n    \n    # Create a DataObject to hold the script file\n    progObj <- new(\"DataObject\", format=\"application/R\", filename=sprintf(\"%s/%s\", dataDir, \"df35b.265.1.R\"), \n                   mediaType=\"text/x-rsrc\", \n                   suggestedFilename=\"hcdbSites.R\")\n    # Add the script DataObject to the DataPackage\n    dp <- addData(dp, progObj)\n    EMLdoc <- updateEMLdistURL(EMLdoc, entityName=\"Locations map R script\", resolveUrl=sprintf(\"%s/%s\", resolveURI, getIdentifier(progObj)))\n    \n    do <- new(\"DataObject\", format=\"image/png\", filename=sprintf(\"%s/%s\", dataDir, \"df35b.266.1.png\"), suggestedFilename=\"hcdbSampleLocs.png\")\n    dp <- addData(dp, do)\n    outputs[[length(outputs)+1]] <- do\n    EMLdoc <- updateEMLdistURL(EMLdoc, entityName=\"Map of sampling locations in the Northern Gulf of Alaska\", resolveUrl=sprintf(\"%s/%s\", resolveURI, getIdentifier(do)))\n    \n    do <- new(\"DataObject\", format=\"image/png\", filename=sprintf(\"%s/%s\", dataDir, \"df35b.267.1.png\"), suggestedFilename=\"hcdbSamplesGOA.png\")\n    dp <- addData(dp, do)\n    outputs[[length(outputs)+1]] <- do\n    EMLdoc <- updateEMLdistURL(EMLdoc, entityName=\"Map of sampling locations in the Gulf of Alaska\", resolveUrl=sprintf(\"%s/%s\", resolveURI, getIdentifier(do)))\n    \n    # Now add the provenance relationships for this script, and it's inputs and outputs\n    dp <- insertDerivation(dp, sources=inputs, program=progObj, derivations=outputs) \n    \n    message(\"Writing EML document...\")\n    write_eml(EMLdoc, emlFile)\n    message(\"Done writing EML document.\")\n    # Read in the metadata file\n    emlFile <- sprintf(\"%s/metadata1.xml\", dataDir)\n    metadataObj <- new(\"DataObject\", format=\"eml://ecoinformatics.org/eml-2.1.1\", filename=emlFile)\n    dp <- addData(dp, metadataObj)\n    \n    # Associate the metadata object with all objects in the package\n    pids <- getIdentifiers(dp)\n    for(iPid in 1:length(pids)) {\n        thisPid <- pids[[iPid]]\n        dp <- insertRelationship(dp, subjectID=getIdentifier(metadataObj), objectIDs=thisPid)\n    }\n    \n    # Upload to DataONE member node\n    resourceMapId <- uploadDataPackage(d1c, dp, replicate=TRUE, public=TRUE, quiet=F, resolveURI=resolveURI)\n}\n\n# Update the distribution url in the EML object with the DataONE \nupdateEMLdistURL <- function(EMLdoc, entityName, resolveUrl) {\n    # Search for the entity among the 'otherEntity' elements\n    found <- FALSE\n    for (iEntity in 1:length(EMLdoc@dataset@otherEntity@.Data)) {\n        thisEntityName <- EMLdoc@dataset@otherEntity@.Data[[iEntity]]@entityName\n        if(thisEntityName == entityName) {\n            message(sprintf(\"Updating otherEntity %s in EML\\n\", thisEntityName))\n            EMLdoc@dataset@otherEntity@.Data[[iEntity]]@physical[[1]]@distribution[[1]]@online@url@.Data <- resolveUrl\n            found <- TRUE\n        }\n    }\n    if(found) return(EMLdoc)\n    # If not already found, search for the entity among the 'dataTable' elements\n    for (iEntity in 1:length(EMLdoc@dataset@dataTable@.Data)) {\n        thisEntityName <- EMLdoc@dataset@dataTable@.Data[[iEntity]]@entityName\n        if(thisEntityName == entityName) {\n            message(sprintf(\"Update dataTable %s in EML\\n\", thisEntityName))\n            EMLdoc@dataset@dataTable@.Data[[iEntity]]@physical[[1]]@distribution[[1]]@online@url@.Data <- resolveUrl\n        }\n    }\n    return(EMLdoc)\n} \n\nuploadPkg()\n",
    "created" : 1487095450612.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2669870994",
    "id" : "130DBD8C",
    "lastKnownWriteTime" : 1487094468,
    "last_content_update" : 1487094468,
    "path" : "~/Projects/DataONE/Provenance/GOA-HydroCarbonDB/jesseChanges/Hydrocarbon2/upload-pkg.5.R",
    "project_path" : "upload-pkg.5.R",
    "properties" : {
        "marks" : "<:39,51\n>:39,64"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}